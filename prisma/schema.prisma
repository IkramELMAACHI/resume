// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?
    // properties
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    // relations
    accounts      Account[] // next-auth
    sessions      Session[] // next-auth
    resumes       Resume[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    fullName   String?
    email      String   @unique
    profilePic String?
    phone      String?
    location   String?
    jobTitle   String?
    shortBio   String?
    //social links
    website    String?
    github     String?
    linkedIn   String?
    dribbble   String?
    // relations
    userId     String   @unique // relation scalar field (used in the `@relation` attribute above)
    user       User     @relation(fields: [userId], references: [id])
}

model Resume {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    title          String?
    description    String?
    templateId     String
    // relations
    userId         String
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    sections       Section[]
    SectionContent SectionContent[]
}

enum SectionType {
    EDUCATION
    WORK
    PROJECTS
    SKILLS
    LANGUAGES
    INTERESTS
}

model Section {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    title          String?
    description    String?
    type           SectionType
    // relations
    resumeId       String
    resume         Resume           @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    sectionContent SectionContent[]
}

model SectionContent {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    title         String?
    description   String?
    establishment String
    location      String
    from          DateTime
    until         DateTime
    level         String
    // relations
    sectionId     String
    section       Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    resumeId      String
    resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
